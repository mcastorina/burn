import sources;
import sinks;

// Rotates each byte by 13
fn rot13(input stream<u8>) stream<u8> {
    for byte in input {
        // yield can be used if the return type is a stream
        if byte >= `a` && byte <= `m` || byte >= `A` && byte <= `M` {
            yield byte + 13;
        } else if byte >= `n` && byte <= `z` || byte >= `N` && byte <= `Z` {
            yield byte - 13;
        } else {
            yield byte;
        }
    }
}

fn main() {
    // syntactic sugar for sinks::stdout(rot13(sources::stdin()))
    sources::stdin() -> rot13() -> sinks::stdout();
}

// #[test]
// fn it_works() {
//     // strings auto convert to streams and back
//     assert rot13('foo') == 'sbb';
//     assert rot13(rot13('foo')) == 'foo';
//     assert rot13('foo bar') == 'sbb one';
// }
