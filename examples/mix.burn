// Interleaves and combines streams.
// This function stops when either stream ends.
fn mix(a stream<u8>, b stream<u8>) -> (out stream<u8>) {
    while !a.eof() && !b.eof() {
        a.next() -> out;
        b.next() -> out;
    }
}

fn main() {
    (SOURCES::stdin(), 'foo'.cycle()) -> mix() -> SINKS::stdout();
}

// #[test]
// fn it_mixes() {
//     out := mix('foo', 'bar');
//     assert out == 'fboaor';
// }
