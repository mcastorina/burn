fn fibonacci(n u32) -> (out u32) {
    if n <= 1 {
        return 1;
    }
    return fibonacci(n-1) + fibonacci(n-2);
}

fn main() {
    // for convenience, SOURCES::args() is already split by whitespace
    // but SOURCES::raw_args() is not
    args := SOURCES::args().skip(1); // stream<stream<u8>>

    first_arg := args.get(); // stream<u8>

    // first_arg is automatically converted to u32 at the callsite,
    // then the output is converted an ascii stream
    fibonacci(first_arg).ascii().chain('\n') -> SINKS::stdout();
}
